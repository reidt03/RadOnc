0.5666667-(1.96)0.06439641
0.5666667+1.96*0.06439641
0.5666667-1.96*0.06439641
library("RadOnc")
install.packages("RadOnc")
library(RadOnc)
install.packages("mosaic")
install.packages("yaml")
install.packages("mosaic")
install.packages("RadOnc")
library(RadOnc)
install.packages("rgl")
library(RadOnc)
compareStructures(teeth, method="DSC")
library(RadOnc2)
library(RadOnc2)
library(RadOnc); data(RadOnc)
## generate plots for a single DVH
stomach <- janedoe[["STOMACH"]]
par(mfrow=c(2,1))
plot(stomach,main="Stomach (Cumulative DVH)", type="cumulative")
points(1:5*1000, stomach[paste("V", 1:5*1000, "cGy", sep="")])
text(1:5*1000, stomach[paste("V", 1:5*1000, "cGy", sep="")],stomach[paste("V", 1:5*1000, "cGy", sep="")],pos=4)
plot(stomach,main="Stomach (Differential DVH)", type="differential", volume="absolute")
## generate plots for multiple DVHs
par(mfrow=c(1,1))
plot(janedoe,plot.type="individual",col=rainbow(length(janedoe)),main="Individual DVHs")
plot(janedoe[c("CTV","PTV")],johndoe[c("LIVER","STOMACH","DUODENUM")],plot.type="grouped",col=c("red","blue"),density=c(NA,20),angle=c(NA,90),width="sd",multiplier=0.5,main="Grouped DVHs")
## generate plots for statistical comparison among two groups of DVHs
plot(janedoe[c("CTV","PTV","DUODENUM")],johndoe[c("LIVER","STOMACH","SMALL_BOWEL","BODY",".*KIDNEY")],plot.type="wilcox",col=c("red","blue"),panel.lower="grouped",width="mad",multiplier=0.5,main="Wilcox Comparison")
rm(list=ls())
install.packages(devtools)
install.packages('devtools')
rm(ls())
rm(list = ls())
install.packages("devtools")
library(devtools)
install_github(reidt03/RadOnc, ref = "add-EMD")
install_github(RadOnc, ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
shortcontent <- c(1)
c
shortcontent
list(shortcontent)
shortlist <- list(shortcontent)
length(shortlist)
library(RadOnc)
compareStructures(shortlist)
compareStructures(shortlist)
install_github("reidt03/RadOnc", ref = "add-EMD")
compareStructures(shortlist)
install_github("reidt03/RadOnc", ref = "add-EMD")
compareStructures(shortlist)
install_github("reidt03/RadOnc", ref = "add-EMD")
install.packages("devtools")
library(devtools)
install_github("reidt03/RadOnc", ref = "add-EMD")
compareStructures(teeth, method = "EMD")
library(RadOnc)
compareStructures(teeth, method = "EMD")
compareStructures(teeth, method = "EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
compareStructures(teeth, method = "EMD")
?par
?mar
install.packages("emdist")
A <- matrix(1:6 / sum(1:6), 2)
B <- matrix(c(0, 0, 0, 0, 0, 1), 2)
emd2d(A, B)
library(emdist)
emd2d(A, B)
# if we bring the rows closer, the distance will be reduced
# since mass from the first row has to move down
emd2d(A, B,, 0.1)
# if we bring the rows closer, the distance will be reduced
# since mass from the first row has to move down
emd2d(A, B,, ydist = 0.1)
# if we bring the rows closer, the distance will be reduced
# since mass from the first row has to move down
emd2d(A, B, xdist = 0.1)
# if we bring the rows closer, the distance will be reduced
# since mass from the first row has to move down
emd2d(A, B, ydist = 0.1)
emd2
emd2()
emd()
emd2d()
install.packages("devtools")
library(devtools)
install_github("localfry/emdist")
library(emdist)
emd2d
emd2d()
library(RadOnc)
teeth
teeth[1]
print(teeth[1])
return(teeth[1])
print(teeth[1]$contours)
contour
?contour
lvl.i
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
M <- matrix(c(4:15), nrow = 4, byrow = FALSE)
emd2d(M, N)
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
M <- matrix(c(23:153), nrow = 4, byrow = FALSE)
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
M <- matrix(c(23:153),  byrow = FALSE)
emd2d(M, N)
M
N
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
M <- matrix(c(4:15), nrow = 4, byrow = FALSE)
M
N
emd(M, N)
emd2d(M, N)
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
M <- matrix(c(5:16), nrow = 4, byrow = FALSE)
emd(M, N)
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
M <- matrix(c(100:111), nrow = 4, byrow = FALSE)
M
N
emd(M, N)
N <- matrix(c(3:14), nrow = 2, byrow = FALSE)
M <- matrix(c(100:111), nrow = 2, byrow = FALSE)
emd(M, N)
emd(M, N)
M
N
M <- matrix(c(100:111), nrow = 4, byrow = FALSE)
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
M <- matrix(c(100:111), nrow = 4, byrow = FALSE)
M
N
emd(M, N)
install_github("reidt03/RadOnc", ref = "add-EMD")
compareStructures(teeth, method = "EMD")
plot(teeth)
install_github("reidt03/RadOnc", ref = "add-EMD")
plot(teeth)
plot(mandible)
compareStructures(teeth, method = "EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
compareStructures(teeth, method = "EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
install.packages("devtools")
library(devtools)
install_github("reidt03/RadOnc", ref = "add-EMD")
install.packages("devtools")
library(devtools)
install_github("reidt03/RadOnc", ref = "add-EMD")
library(RadOnc)
install_github("localfry/emdist")
library(emdist)
partial_a <- teeth[[1]]$vertices[1:185,]
partial_b <- teeth[[2]]$vertices[1:185,]
is.matrix(partial_a)
emd(partial_a, partial_b)
partial_a <- teeth[[1]]$vertices[2:186,]
partial_b <- teeth[[2]]$vertices[2:186,]
is.matrix(partial_a)
emd(partial_a, partial_b)
partial_a <- teeth[[1]]$vertices[13:186,]
partial_b <- teeth[[2]]$vertices[13:186,]
is.matrix(partial_a)
emd(partial_a, partial_b)
partial_a <- teeth[[1]]$vertices[187:200,]
partial_b <- teeth[[2]]$vertices[187:200,]
is.matrix(partial_a)
emd(partial_a, partial_b)
partial_a <- teeth[[1]]$vertices[250:260,]
partial_b <- teeth[[2]]$vertices[250:260,]
is.matrix(partial_a)
emd(partial_a, partial_b)
partial_a <- teeth[[1]]$vertices[25:36,]
partial_b <- teeth[[2]]$vertices[25:36,]
is.matrix(partial_a)
emd(partial_a, partial_b)
partial_b <- teeth[[2]]$vertices[1:10,]
is.matrix(partial_a)
emd(partial_a, partial_b)
partial_a <- teeth[[1]]$vertices[1:10,]
partial_b <- teeth[[2]]$vertices[1:10,]
is.matrix(partial_a)
emd(partial_a, partial_b)
partial_a <- teeth[[1]]$vertices[1:10,]
partial_b <- teeth[[1]]$vertices[1:10,]
is.matrix(partial_a)
emd(partial_a, partial_b)
partial_a = partial_b
identical(partial_a, partial_b)
install.packages("devtools")
library(devtools)
install_github("reidt03/RadOnc", ref = "add-EMD")
library(RadOnc)
install_github("localfry/emdist")
library(emdist)
simple_a <- matrix(c(2, 5, 7))
is.matrix(simple_a)
simple_b <- matrix(c(1, 8, 9))
emd(simple_a, simple_b)
partial_a <- teeth[[1]]$vertices[1:10,]
partial_b <- teeth[[1]]$vertices[1:10,]
is.matrix(partial_a)
emd(partial_a, partial_b)
teeth[[1]]$vertices
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
M <- matrix(c(100:111), nrow = 4, byrow = FALSE)
M
n
N
funsize <- matrix(c(1,2,1,5,1,3,1,7), nrow = 4, byrow = FALSE)
funsize
funsize <- matrix(c(1,1,1,1,5,23,141,145), nrow = 4, byrow = FALSE)
funsize
punsize <- matrix(c(1,1,1,1,2,321,412412,1412412415), nrow = 4, byrow = FALSE)
punsize
emd(funsize, punsize)
funsize <- matrix(c(1,1,1,1,5,23,141,145), nrow = 4, byrow = FALSE)
funsize
punsize <- matrix(c(1,1,0.0001,0.001,2,321,412412,1412412415), nrow = 4, byrow = FALSE)
punsize
emd(funsize, punsize)
funsize <- matrix(c(1,1,1,1,5,23,141,145), nrow = 4, byrow = FALSE)
funsize
punsize <- matrix(c(1,1,1,1,5,23,141,145), nrow = 4, byrow = FALSE)
punsize
identical(funsize, punsize)
emd(funsize, punsize)
partial_a <- teeth[[1]]$vertices[1:10,]
partial_b <- teeth[[1]]$vertices[1:10,]
is.matrix(partial_a)
emd(partial_a, partial_b)
identical(partial_a, partial_a)
emd(partial_a, partial_a)
partial_a
?cbind
partial_a
emdw()
Aw <- matrix(c(1,1,1,1,1,1,1,1,1,1))
Bw <- matrix(c(1,1,1,1,1,1,1,1,1,1))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices[1:10,]
partial_b <- teeth[[2]]$vertices[1:10,]
emdw(partial_a, Aw, partial_b, Bw)
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices
partial_b <- teeth[[2]]$vertices
emdw(partial_a, Aw, partial_b, Bw)
?rep
teeth[[1]]$vertices
teeth[[2]]$vertices
partial_a <- teeth[[1]]$vertices[1:185,]
partial_b <- teeth[[2]]$vertices[1:185,]
partial_a
partial_b
Aw <- matrix(c(rep(1, times = 185)))
Aw
Aw <- matrix(c(rep(1, times = 185)))
Bw <- matrix(c(rep(1, times = 185)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices[1:190,]
partial_b <- teeth[[2]]$vertices[1:190,]
Aw <- matrix(c(rep(1, times = 190)))
Bw <- matrix(c(rep(1, times = 190)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices[1:330,]
partial_b <- teeth[[2]]$vertices[1:330,]
teeth[[1]]$vertices
partial_a <- teeth[[1]]$vertices[1:324,]
partial_b <- teeth[[2]]$vertices[1:324,]
Aw <- matrix(c(rep(1, times = 324)))
Bw <- matrix(c(rep(1, times = 324)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices[1:249,]
partial_b <- teeth[[2]]$vertices[1:249,]
Aw <- matrix(c(rep(1, times = 249)))
Bw <- matrix(c(rep(1, times = 249)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices[1:252,]
partial_b <- teeth[[2]]$vertices[1:252,]
Aw <- matrix(c(rep(1, times = 252)))
Bw <- matrix(c(rep(1, times = 252)))
emdw(partial_a, Aw, partial_b, Bw)
mandible$vertices
partial_a <- teeth[[1]]$vertices[1:252,]
partial_b <- teeth[[3]]$vertices[1:252,]
Aw <- matrix(c(rep(1, times = 252)))
Bw <- matrix(c(rep(1, times = 252)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a
partial_b
partial_a <- teeth[[1]]$vertices[1:252,]
partial_b <- teeth[[3]]$vertices[1:252,]
Aw <- matrix(c(rep(1, times = 252)))
Bw <- matrix(c(rep(1, times = 252)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices[1:249,]
partial_b <- teeth[[3]]$vertices[1:249,]
Aw <- matrix(c(rep(1, times = 249)))
Bw <- matrix(c(rep(1, times = 249)))
emdw(partial_a, Aw, partial_b, Bw)
install_github("localfry/emdist")
partial_a <- teeth[[1]]$vertices[1:249,]
partial_b <- teeth[[3]]$vertices[1:249,]
Aw <- matrix(c(rep(1, times = 249)))
Bw <- matrix(c(rep(1, times = 249)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices[1:320,]
partial_b <- teeth[[3]]$vertices[1:320,]
Aw <- matrix(c(rep(1, times = 320)))
Bw <- matrix(c(rep(1, times = 320)))
emdw(partial_a, Aw, partial_b, Bw)
N <- teeth[[3]]$vertices
N
partial_a <- teeth[[1]]$vertices[1:310,]
partial_b <- teeth[[3]]$vertices[1:310,]
Aw <- matrix(c(rep(1, times = 310)))
Bw <- matrix(c(rep(1, times = 310)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices[5:315,]
partial_b <- teeth[[3]]$vertices[1:310,]
Aw <- matrix(c(rep(1, times = 310)))
Bw <- matrix(c(rep(1, times = 310)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices[5:314,]
partial_b <- teeth[[3]]$vertices[1:310,]
Aw <- matrix(c(rep(1, times = 310)))
Bw <- matrix(c(rep(1, times = 310)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices[5:314,]
partial_b <- teeth[[3]]$vertices[1:311,]
Aw <- matrix(c(rep(1, times = 310)))
Bw <- matrix(c(rep(1, times = 311)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices[5:314,]
partial_b <- teeth[[3]]$vertices[1:309,]
Aw <- matrix(c(rep(1, times = 310)))
Bw <- matrix(c(rep(1, times = 309)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices
partial_b <- teeth[[3]]$vertices
Aw <- matrix(c(rep(1, times = 324)))
Bw <- matrix(c(rep(1, times = 310)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices
partial_b <- teeth[[3]]$vertices
Aw <- matrix(c(rep(1, times = length(partial_a))))
Bw <- matrix(c(rep(1, times = length(partial_b))))
emdw(partial_a, Aw, partial_b, Bw)
length(partial_b)
partial_a <- teeth[[1]]$vertices
partial_b <- teeth[[3]]$vertices
Aw <- matrix(c(rep(1, times = length(partial_a)/3)))
Bw <- matrix(c(rep(1, times = length(partial_b3)/3)))
emdw(partial_a, Aw, partial_b, Bw)
partial_a <- teeth[[1]]$vertices
partial_b <- teeth[[3]]$vertices
Aw <- matrix(c(rep(1, times = length(partial_a)/3)))
Bw <- matrix(c(rep(1, times = length(partial_b)/3)))
emdw(partial_a, Aw, partial_b, Bw)
packages = ("RODBC")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, repos="http://cran.r-project.org", dependencies = TRUE)
library(x, character.only = TRUE)
}
})
?package.check
packages = ("devtools")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, repos="http://cran.r-project.org", dependencies = TRUE)
library(x, character.only = TRUE)
install_github(install_github("reidt03/RadOnc", ref = "add-EMD"))
library(RadOnc)
install_github("localfry/emdist")
library(emdist)
}
})
require(RadOnc)
install_github("reidt03/RadOnc", ref = "add-EMD")
install.packages("devtools")
library(devtools)
install_github("reidt03/RadOnc", ref = "add-EMD")
library(RadOnc)
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
emdist::emd()
remove.packages("emdist")
emdist::emd()
install.packages("devtools")
library(devtools)
install_github("reidt03/RadOnc", ref = "add-EMD")
library(RadOnc)
partial_a <- teeth[[1]]$vertices
partial_b <- teeth[[3]]$vertices
Aw <- matrix(c(rep(1, times = length(partial_a)/3)))
Bw <- matrix(c(rep(1, times = length(partial_b)/3)))
emdw(partial_a, Aw, partial_b, Bw)
install_github("localfry/emdist")
emd(partial_a, partial_a)
identical(teeth[[1]]$vertices, teeth[[1]]$vertices)
emd(teeth[[1]]$vertices, teeth[[1]]$vertices)
install_github("localfry/emdist")
install_github("localfry/emdist")
emd(teeth[[1]]$vertices, teeth[[1]]$vertices)
emdw(partial_a, Aw, partial_b, Bw)
data(RadOnc)
ls
load("/Users/zachfried/Documents/GitHub/RadOnc/data/RadOnc.RData")
dose
teeth$`Tooth #1`
teeth[1]$vertices
dim(teeth[1]$verticies)
compareStructures(teeth, method = "EMD")
install_github(install_github("reidt03/RadOnc", ref = "add-EMD"))
compareStructures(teeth, method = "EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
compareStructures(teeth, method = "EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
compareStructures(teeth, method = "EMD")
compareStructures(teeth, method = "EMD", A = teeth[[1]]$vertices, wA = matrix(c(rep(1, times = length(partial_a)/3))), B = teeth[[3]]$vertices, wB = matrix(c(rep(1, times = length(partial_b)/3))))
compareStructures(teeth, method = "EMD", A = teeth[[1]]$vertices, wA = matrix(c(rep(1, times = length(A)))), B = teeth[[3]]$vertices, wB = matrix(c(rep(1, times = length(A))))),
install_github("localfry/emdist")
partial_b
compareStructures(teeth, method = "EMD", A = structures[1]$vertices, wA = matrix(c(rep(1, times = length(A)))), B = structures[2]$vertice, wB = matrix(c(rep(1, times = length(A)))))
compareStructures(teeth, method = "EMD", A = structures[1]$vertices, wA = matrix(c(rep(1, times = length("A")))), B = structures[2]$vertice, wB = matrix(c(rep(1, times = length(A)))))
compareStructures(teeth, method = "EMD", A = structures[1]$vertices, wA = matrix(c(rep(1, times = length(structures[1]$vertices)))), B = structures[2]$vertice, wB = matrix(c(rep(1, times = length(A)))))
compareStructures(teeth, method = "EMD", A = x[[1]]$vertices, wA = matrix(c(rep(1, times = length(x[[1]]$vertices)))), B = x[[2]]$vertices, wB = matrix(c(rep(1, times = length(x[[2]]$vertices)))))
compareStructures(teeth, method = "EMD", A = teeth[[1]]$vertices, wA = matrix(c(rep(1, times = length(teeth[[1]]$vertices)))), B = teeth[[2]]$vertices, wB = matrix(c(rep(1, times = length(teeth[[2]]$vertices)))))
length(teeth[[1]]$vertices
length(teeth[[1]]$vertices)
?length
length
install_github("reidt03/RadOnc", ref = "add-EMD")
ls()
janedoe.RTdata
slotNames(janedoes.RTdata)
slotNames(janedoe.RTdata)
janedoe.RTdata$name
janedoe.RTdata$CT
janedoe.RTdata$dose
dim(janedoe.RTdata$dose)
janedoe.RTdata$dose[1,,]
janedoe.RTdata$dose[1,1,]
plot(janedoe.RTdata$dose)
janedoe.RTdata$dose[1,1,5]
janedoe.RTdata$dose[,1,5]
?get.HU
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
detach("package:emdist", unload=TRUE)
remove.packages("emdist")
detach("package:RadOnc", unload=TRUE)
remove.packages("RadOnc")
install_github("reidt03/RadOnc", ref = "add-EMD")
?emdist
?emd
?emdw
emdw
library(RadOnc)
library(emdist)
install_github("reidt03/RadOnc", ref = "add-EMD")
install.packages("devtools")
library(devtools)
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
install.packages("devtools")
library(devtools)
install_github("reidt03/RadOnc", ref = "add-EMD")
library(RadOnc)
partial_a <- teeth[[1]]$vertices
partial_b <- teeth[[3]]$vertices
Aw <- matrix(c(rep(1, times = length(partial_a)/3)))
Bw <- matrix(c(rep(1, times = length(partial_b)/3)))
emdw(partial_a, Aw, partial_b, Bw)
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
compareStructures(teeth, method = "EMD", A = teeth[[1]]$vertices, wA = matrix(c(rep(1, times = length(teeth[[1]]$vertices)))), B = teeth[[2]]$vertices, wB = matrix(c(rep(1, times = length(teeth[[2]]$vertices)))))
teeth[[1]]$vertices
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
?.onload
?.onLoad
?topenv
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
?SHLIB
R CMD SHLIB
install_github("reidt03/RadOnc", ref = "add-EMD")
install_github("reidt03/RadOnc", ref = "add-EMD")
roxygen2::roxygenise()
install.packages("roxygen2")
roxygen2::roxygenise()
getwd()
setwd(/Users/zachfried/Documents)
setwd("/Users/zachfried/Documents")
setwd("/Users/zachfried/Documents/GitHub/RadOnc")
getwd()
roxygen2::roxygenise()
install.packages("roxygen_devtest")
