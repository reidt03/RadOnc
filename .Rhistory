x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
subtract <- max_distance - dist
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,0,0,1,2,0) #starting point xyz followed by end point xyz
d <- 0.5 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
d <- 0.1 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
p0 <- c(0,2,0) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
subtract <- max_distance - dist
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,2,4,1,4,7) #starting point
d <- 3.74 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000))$x #POI coordinates outputted when $x added
1
1
1
d <- 1 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted when $x added
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
subtract <- max_distance - dist
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,2,4,1,4,7) #starting point
d <- 4 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted when $x added
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
subtract <- max_distance - dist
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,2,4,1,4,7) #starting point xyz followed by end point xyz
d <- 3.74 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
d <- 1 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- 2*x1 + 2  - x2
F[3] <- 3*x1 + 4  - x3
return(F)
}
y <- c(0,2,4) #starting point
d <- 4 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000))$x #POI coordinates
max_distance
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
subtract <- max_distance - dist
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,2,4,1,4,7) #starting point xyz followed by end point xyz
d <- 1.5 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- 2*x1 + 2  - x2
F[3] <- 3*x1 + 4  - x3
return(F)
}
y <- c(0,2,4) #starting point
d <- 4 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000))$x #POI coordinates
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
subtract <- max_distance - dist
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,2,4,1,4,7) #starting point xyz followed by end point xyz
d <- 1.5 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- 2*x1 + 2  - x2
F[3] <- 3*x1 + 4  - x3
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,2,4,1,4,7) #starting point xyz followed by end point xyz
d <- 1.5 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- 2*x1 + 2  - x2
F[3] <- 3*x1 + 4  - x3
return(F)
}
y <- c(0,2,4) #starting point
d <- 4 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000))$x #POI coordinates
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
subtract <- max_distance - dist
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,2,4,1,4,7) #starting point xyz followed by end point xyz
d <- 1.5 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- 2*x1 + 2  - x2
F[3] <- 3*x1 + 4  - x3
return(F)
}
y <- c(0,2,4) #starting point
d <- 4 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000))$x #POI coordinates
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
subtract <- max_distance - dist
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,2,4,1,4,7) #starting point xyz followed by end point xyz
d <- 1.5 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- 2*x1 + 2  - x2
F[3] <- 3*x1 + 4  - x3
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,2,4,1,4,7) #starting point xyz followed by end point xyz
d <- 1.5 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
# subtract <- max_distance - dist
# F <- rep(NA, 2)
#
# F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
# F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- 2*x1 + 2  - x2
F[3] <- 3*x1 + 4  - x3
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,2,4,1,4,7) #starting point xyz followed by end point xyz
d <- 1.5 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
subtract <- max_distance - dist
# F <- rep(NA, 2)
#
# F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
# F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- 2*x1 + 2  - x2
F[3] <- 3*x1 + 4  - x3
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,2,4,1,4,7) #starting point xyz followed by end point xyz
d <- 1.5 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
subtract <- max_distance - dist
F <- rep(NA, 2)
#
# F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
# F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- 2*x1 + 2  - x2
F[3] <- 3*x1 + 4  - x3
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,2,4,1,4,7) #starting point xyz followed by end point xyz
d <- 1.5 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
subtract <- max_distance - dist
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
# F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
# F[2] <- 2*x1 + 2  - x2
# F[3] <- 3*x1 + 4  - x3
return(F)
}
max_distance <- ((y[4]-y[1])^2 + (y[5]-y[2])^2 + (y[6]-y[3])^2)^.5
y <- c(0,2,4,1,4,7) #starting point xyz followed by end point xyz
d <- 1.5 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000)) #POI coordinates outputted
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- 2*x1 + 2  - x2
F[3] <- 3*x1 + 4  - x3
return(F)
}
y <- c(0,2,4) #starting point
d <- 4 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000))$x #POI coordinates
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- 2*x1 + 2  - x2
F[3] <- 3*x1 + 4  - x3
return(F)
}
y <- c(0,2,4) #starting point
d <- 4 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000))$x #POI coordinates
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
# F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
# F[2] <- 2*x1 + 2  - x2
# F[3] <- 3*x1 + 4  - x3
return(F)
}
y <- c(0,2,4) #starting point
d <- 4 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000))$x #POI coordinates
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
subtract <- max_distance - dist
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - subtract
# F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
# F[2] <- 2*x1 + 2  - x2
# F[3] <- 3*x1 + 4  - x3
return(F)
}
y <- c(0,2,4) #starting point
d <- 4 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000))$x #POI coordinates
f <- function(x, dist=d) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
y1 <- y[1]
y2 <- y[2]
y3 <- y[3]
y4 <- y[4]
y5 <- y[5]
y6 <- y[6]
subtract <- max_distance - dist
F <- rep(NA, 2)
F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
F[2] <- ((x1-y4)^2 + (x2-y5)^2 + (x3-y6)^2)^.5  - 1
# F[1] <- ((x1-y1)^2 + (x2-y2)^2 + (x3-y3)^2)^.5  - dist
# F[2] <- 2*x1 + 2  - x2
# F[3] <- 3*x1 + 4  - x3
return(F)
}
y <- c(0,2,4) #starting point
d <- 4 #distance away from the starting point
p0 <- c(5,5,5) #guess of POI coordinates
nleqslv(x=p0, fn=f,control=list(maxit=3000))$x #POI coordinates
